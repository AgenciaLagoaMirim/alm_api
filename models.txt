# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey and OneToOneField has `on_delete` set to the desired behavior
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from django.db import models


class AccountsCustomuser(models.Model):
    id = models.BigAutoField(primary_key=True)
    password = models.CharField(max_length=128)
    last_login = models.DateTimeField(blank=True, null=True)
    is_superuser = models.BooleanField()
    email = models.CharField(unique=True, max_length=254)
    is_staff = models.BooleanField()
    is_active = models.BooleanField()
    date_joined = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'accounts_customuser'


class AccountsCustomuserGroups(models.Model):
    id = models.BigAutoField(primary_key=True)
    customuser = models.ForeignKey(AccountsCustomuser, models.DO_NOTHING)
    group = models.ForeignKey('AuthGroup', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'accounts_customuser_groups'
        unique_together = (('customuser', 'group'),)


class AccountsCustomuserUserPermissions(models.Model):
    id = models.BigAutoField(primary_key=True)
    customuser = models.ForeignKey(AccountsCustomuser, models.DO_NOTHING)
    permission = models.ForeignKey('AuthPermission', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'accounts_customuser_user_permissions'
        unique_together = (('customuser', 'permission'),)


class AuthGroup(models.Model):
    name = models.CharField(unique=True, max_length=150)

    class Meta:
        managed = False
        db_table = 'auth_group'


class AuthGroupPermissions(models.Model):
    id = models.BigAutoField(primary_key=True)
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)
    permission = models.ForeignKey('AuthPermission', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_group_permissions'
        unique_together = (('group', 'permission'),)


class AuthPermission(models.Model):
    name = models.CharField(max_length=255)
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING)
    codename = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'auth_permission'
        unique_together = (('content_type', 'codename'),)


class AuthtokenToken(models.Model):
    key = models.CharField(primary_key=True, max_length=40)
    created = models.DateTimeField()
    user = models.OneToOneField(AccountsCustomuser, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'authtoken_token'


class DjangoAdminLog(models.Model):
    action_time = models.DateTimeField()
    object_id = models.TextField(blank=True, null=True)
    object_repr = models.CharField(max_length=200)
    action_flag = models.SmallIntegerField()
    change_message = models.TextField()
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey(AccountsCustomuser, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'django_admin_log'


class DjangoContentType(models.Model):
    app_label = models.CharField(max_length=100)
    model = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'django_content_type'
        unique_together = (('app_label', 'model'),)


class DjangoMigrations(models.Model):
    id = models.BigAutoField(primary_key=True)
    app = models.CharField(max_length=255)
    name = models.CharField(max_length=255)
    applied = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_migrations'


class DjangoSession(models.Model):
    session_key = models.CharField(primary_key=True, max_length=40)
    session_data = models.TextField()
    expire_date = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_session'


class Sl500(models.Model):
    id = models.IntegerField(primary_key=True)
    ano = models.IntegerField(blank=True, null=True)
    mes = models.IntegerField(blank=True, null=True)
    dia = models.IntegerField(blank=True, null=True)
    hora = models.IntegerField(blank=True, null=True)
    minuto = models.IntegerField(blank=True, null=True)
    segundo = models.IntegerField(blank=True, null=True)
    dado1 = models.DecimalField(max_digits=5, decimal_places=2, blank=True, null=True)
    dado2 = models.DecimalField(max_digits=5, decimal_places=2, blank=True, null=True)
    dado3 = models.DecimalField(max_digits=5, decimal_places=3, blank=True, null=True)
    dado4 = models.DecimalField(max_digits=5, decimal_places=1, blank=True, null=True)
    dado5 = models.DecimalField(max_digits=3, decimal_places=1, blank=True, null=True)
    dado6 = models.DecimalField(max_digits=4, decimal_places=1, blank=True, null=True)
    dado7 = models.IntegerField(blank=True, null=True)
    dado8 = models.IntegerField(blank=True, null=True)
    dado9 = models.IntegerField(blank=True, null=True)
    dado10 = models.IntegerField(blank=True, null=True)
    dado11 = models.DecimalField(max_digits=5, decimal_places=1, blank=True, null=True)
    dado12 = models.DecimalField(max_digits=5, decimal_places=1, blank=True, null=True)
    dado13 = models.DecimalField(max_digits=4, decimal_places=3, blank=True, null=True)
    dado14 = models.DecimalField(max_digits=5, decimal_places=3, blank=True, null=True)
    dado15 = models.DecimalField(max_digits=4, decimal_places=1, blank=True, null=True)
    dado16 = models.DecimalField(max_digits=3, decimal_places=1, blank=True, null=True)
    dado17 = models.DecimalField(max_digits=5, decimal_places=1, blank=True, null=True)
    dado18 = models.DecimalField(max_digits=5, decimal_places=2, blank=True, null=True)
    dado19 = models.DecimalField(max_digits=5, decimal_places=3, blank=True, null=True)
    dado20 = models.DecimalField(max_digits=5, decimal_places=3, blank=True, null=True)
    dado21 = models.DecimalField(max_digits=5, decimal_places=2, blank=True, null=True)
    dado22 = models.DecimalField(max_digits=5, decimal_places=2, blank=True, null=True)
    dado23 = models.IntegerField(blank=True, null=True)
    dado24 = models.IntegerField(blank=True, null=True)
    dado25 = models.IntegerField(blank=True, null=True)
    data_safe = models.DateTimeField()
    local_date = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'sl500'


class Sl500P(models.Model):
    id = models.IntegerField()
    principal = models.ForeignKey(Sl500, models.DO_NOTHING)
    dado_0 = models.IntegerField()
    dado_1 = models.FloatField(blank=True, null=True)
    dado_2 = models.FloatField(blank=True, null=True)
    dado_3 = models.FloatField(blank=True, null=True)
    dado_4 = models.FloatField(blank=True, null=True)
    dado_5 = models.IntegerField(blank=True, null=True)
    dado_6 = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sl500p'


class StationReadings(models.Model):
    id = models.BigAutoField(primary_key=True)
    time_measure = models.DateTimeField(blank=True, null=True)
    station = models.ForeignKey('StationStation', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'station_readings'
        unique_together = (('time_measure', 'station'),)


class StationReadingsSensors(models.Model):
    id = models.BigAutoField(primary_key=True)
    data_value = models.DecimalField(max_digits=10, decimal_places=3, blank=True, null=True)
    reading = models.ForeignKey(StationReadings, models.DO_NOTHING, blank=True, null=True)
    sensor = models.ForeignKey('StationSensors', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'station_readings_sensors'


class StationSensors(models.Model):
    id = models.BigAutoField(primary_key=True)
    code = models.CharField(max_length=10, blank=True, null=True)
    name = models.CharField(max_length=100, blank=True, null=True)
    unit_measure = models.CharField(max_length=20, blank=True, null=True)
    station = models.ForeignKey('StationStation', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'station_sensors'


class StationStation(models.Model):
    id = models.BigAutoField(primary_key=True)
    name = models.CharField(max_length=100, blank=True, null=True)
    location = models.CharField(max_length=100, blank=True, null=True)
    user = models.ForeignKey(AccountsCustomuser, models.DO_NOTHING, blank=True, null=True)
    type = models.CharField(max_length=1)

    class Meta:
        managed = False
        db_table = 'station_station'
